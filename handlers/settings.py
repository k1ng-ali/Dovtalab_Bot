from aiogram import types
from aiogram.filters import Command
from bot import dp, bot
from models.user import UserManager
from utils.keyboards import vertical_kb
from config import LANGUAGES
users: UserManager | None = None

def setup(_users: UserManager):
    global users
    users = _users

@dp.message(Command("help"))
async def help(msg: types.Message):
    assert  users
    lang_key = str(msg.from_user.id)
    lang = users.get_lang(lang_key, "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    await msg.reply(messages.get("help", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start_quiz [–¢–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–∞] - –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n‚Ä¢ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n‚Ä¢ –í –ø–æ–ª–µ [–¢–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–∞] —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n‚Ä¢ –ü—Ä–∏–º–µ—Ä: /start_quiz –ë–ò–û–õ–û–ì–ò–Ø\n\n/stop_quiz - –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n‚Ä¢ –ï—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –µ—ë.\n‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.\n\n/rating - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤.\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (–æ—á–∫–∏) –∏–≥—Ä–æ–∫–æ–≤.\n‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n/set_time [–≤—Ä–µ–º—è] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n‚Ä¢ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–¥–∞—ë—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.\n‚Ä¢ –í –ø–æ–ª–µ [–≤—Ä–µ–º—è] —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.\n‚Ä¢ –ü—Ä–∏–º–µ—Ä: /set_time 30 (–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞—ë—Ç—Å—è 30 —Å–µ–∫—É–Ω–¥)\n\n/set_count [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –∑–∞–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.\n‚Ä¢ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.\n‚Ä¢ –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 3 –¥–æ 30 –≤–æ–ø—Ä–æ—Å–æ–≤).\n‚Ä¢ –ü—Ä–∏–º–µ—Ä: /set_count 10 –¥–ª—è 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ\n\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n‚Ä¢ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏."
                    ),
                    parse_mode="HTML")

@dp.message(Command("set_time"))
async def set_time(msg: types.Message):
    assert users
    users.ensure(msg.chat.id, is_group=(msg.chat.type != "private"), title=getattr(msg.chat, "title", None),
                 username=getattr(msg.chat, "username", None), is_started=True)

    lang = users.get_lang(str(msg.chat.id) if msg.chat.type != "private" else str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    key = str(msg.chat.id if msg.chat.type != "private" else msg.from_user.id)
    parts = msg.text.split(maxsplit=1)
    if (users.get_type(key) == "group"):
        chat_member = await bot.get_chat_member(key, msg.from_user.id)
        if  chat_member.status not in ["administrator", "creator"]:
            return await msg.reply(messages.get("set_time_not_admin", "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!"), parse_mode="HTML")
    if len(parts) < 2:
        return await msg.reply(messages.get('set_time_not_value', "‚ö† –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!"), parse_mode="HTML")
    try:
        val = int(parts[1])
    except ValueError:
        return await msg.reply(messages.get('set_time_incorrect',"‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!"), parse_mode="HTML")
    if val != 0 and not (5 <= val <= 60):
        return await msg.reply(messages.get("set_time_limit", "‚ö† –í—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 60 —Å–µ–∫—É–Ω–¥!"), parse_mode="HTML")
    users.set_quiz_time(key, val)
    await msg.reply(messages.get("time_is_set", "‚úÖ –í—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value} —Å–µ–∫—É–Ω–¥").format(value=val), parse_mode="HTML")

@dp.message(Command("set_count"))
async def set_count(msg: types.Message):
    assert users
    users.ensure(msg.chat.id, is_group=(msg.chat.type != "private"), title=getattr(msg.chat, "title", None),
                 username=getattr(msg.chat, "username", None), is_started=True)

    lang = users.get_lang(str(msg.chat.id) if msg.chat.type != "private" else str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    key = str(msg.chat.id if msg.chat.type != "private" else msg.from_user.id)
    if (users.get_type(key) == "group"):
        chat_member = await bot.get_chat_member(key, msg.from_user.id)
        if chat_member.status not in ["administrator", "creator"]:
            return await msg.reply(messages.get("set_count_not_admin", "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!"), parse_mode="HTML")
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply(messages.get("set_count_not_value", "‚ö† –ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!"), parse_mode="HTML")
    try:
        n = int(parts[1])
    except ValueError:
        return await msg.reply(messages.get("set_count_incorrect", "‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!"), parse_mode="HTML")
    if not (3 <= n <= 30):
        return await msg.reply(messages.get("set_count_limit", "‚ö† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30!"))
    users.set_num_questions(key, n)
    await msg.reply(messages.get("count_is_set", "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}").format(value=n), parse_mode="HTML")

@dp.message(Command("set_lang"))
async def set_lang(msg: types.Message):
    assert users
    users.ensure(msg.chat.id, is_group=(msg.chat.type != "private"), title=getattr(msg.chat, "title", None),
                 username=getattr(msg.chat, "username", None), is_started=True)

    lang = users.get_lang(str(msg.chat.id) if msg.chat.type != "private" else str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    if msg.chat.type == "private":
        rows = [(name, f"set_lang:user:{code}") for code, name in LANGUAGES.items()]
        return await msg.answer(messages.get("choose_lang",  "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"), reply_markup=vertical_kb(rows), parse_mode="HTML")
    else:
        chat_member = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
        if chat_member.status not in ["administrator", "creator"]:
            return await msg.reply(messages.get("lang_for_gr_error", "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã!"), parse_mode="HTML")
        rows = [(name, f"set_lang:group:{msg.chat.id}:{code}") for code, name in LANGUAGES.items()]
        try:
            await bot.send_message(chat_id=str(msg.from_user.id), text=messages.get("lang_for_gr", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã ¬´{group}¬ª.\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:").format(group=msg.chat.title), reply_markup=vertical_kb(rows), parse_mode="HTML")
            await msg.reply(messages.get("lang_for_gr_sent",  "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."), parse_mode="HTML")
        except:
            await msg.answer("–û—â–∏–±–∫–∞! –ê–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–æ.", parse_mode="HTML")
        return


@dp.callback_query(lambda c: c.data and c.data.startswith("set_lang:"))
async def set_lang_callback(msg: types.CallbackQuery):
    assert users
    users.ensure(msg.from_user.id, is_group=False,
                 username=getattr(msg.from_user, "username", None), is_started=True)
    lang = users.get_lang(str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})

    parts = msg.data.split(":")
    if parts[1] == "group":
        if len(parts) < 4:
            return await msg.answer(messages.get("incorrect_lang",  "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤:\n<b>–†–£–°–°–ö–ò–ô, –¢–ê–î–ñ–ò–ö–°–ö–ò–ô, –ê–ù–ì–õ–ò–ô–°–ö–ò–ô</b>.\nüîπ –ü—Ä–∏–º–µ—Ä: <code>/set_lang –†–£–°–°–ö–ò–ô</code>"), show_alert=True, parse_mode="HTML")
        group_id, code = parts[2], parts[3]
        users.set_lang(group_id, code)
        messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(code, {})
        await msg.message.edit_text(messages.get("lang_is_set","‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {value}" ).format(value=LANGUAGES[code]), parse_mode="HTML")
        await bot.send_message(group_id, messages.get("lang_is_set","‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {value}" ).format(value=LANGUAGES[code]), parse_mode="HTML")
        return await msg.answer("OK")
    else:
        if len(parts) < 3:
            return await msg.answer(messages.get("incorrect_lang",
                                                 "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤:\n<b>–†–£–°–°–ö–ò–ô, –¢–ê–î–ñ–ò–ö–°–ö–ò–ô, –ê–ù–ì–õ–ò–ô–°–ö–ò–ô</b>.\nüîπ –ü—Ä–∏–º–µ—Ä: <code>/set_lang –†–£–°–°–ö–ò–ô</code>"),
                                    show_alert=True, parse_mode="HTML")
        code = parts[2]
        users.set_lang(str(msg.from_user.id), code)
        messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(code, {})
        await msg.message.edit_text(messages.get("lang_is_set", "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {value}").format(value=LANGUAGES[code]), parse_mode="HTML")
        return await msg.answer("OK")
