import asyncio
from aiogram import types
from aiogram.filters import Command
from bot import dp, bot
from config import CFG, AD
from utils.helpers import split_text
from models.user import UserManager
from services.scheduler import DailyStats

users: UserManager | None = None
ad: AD | None = None
stats: DailyStats | None = None

def setup(_users: UserManager, _ad: AD
          , _stats: DailyStats):
    global users, ad, stats
    users = _users
    ad = _ad
    stats = _stats

@dp.message(Command("send_announcement"))
async def send_announcement(msg: types.Message):
    if str(msg.from_user.id) != CFG.ADMIN_ID:
        return await msg.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

    parts = (msg.text or msg.caption or "").split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")

    text = parts[1]
    media_id = None
    media_type = None
    if msg.photo:
        media_type = "photo"
        media_id = msg.photo[-1].file_id
    elif msg.video:
        media_type = "video"
        media_id = msg.video.file_id

    ok, bad = 0, 0
    for uid, data in users.users.items():
        if not data.get("started"):
            continue
        try:
            if media_type and media_id:
                if media_type == "photo":
                    await bot.send_photo(uid, media_id, caption=text, parse_mode="HTML")
                else:
                    await bot.send_video(uid, media_id, caption=text, parse_mode="HTML")
            else:
                for chunk in split_text(text):
                    await bot.send_message(uid, chunk, parse_mode="HTML")
                    await asyncio.sleep(0.05)
            ok += 1
        except Exception:
            data["started"] = False
            bad += 1
        await asyncio.sleep(0.05)
    users.save()
    await msg.reply(f"–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—Ö: {ok}, –æ—à–∏–±–æ–∫: {bad}")

@dp.message(Command("clear_unactives"))
async def clear_unactives(msg: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if str(msg.from_user.id) != CFG.ADMIN_ID:
        return await msg.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –±–æ—Ç–∞
    inactive_users = [uid for uid, data in users.users.items() if not data.get("started")]

    # –£–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    for uid in inactive_users:
        users.users.pop(uid, None)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    users.save()

    await msg.reply(f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã: {len(inactive_users)}")


@dp.message(Command("set_ad"))
async def set_ad(msg: types.Message):
    assert users
    users.ensure(msg.chat.id, is_group=(msg.chat.type != "private"), title=getattr(msg.chat, "title", None),
                 username=getattr(msg.chat, "username", None), is_started=True)

    lang = users.get_lang(str(msg.chat.id) if msg.chat.type != "private" else str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    if (str(msg.from_user.id) != CFG.ADMIN_ID):
        return await msg.reply(messages.get("set_ad_error", "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É!"), parse_mode="HTML")
    try:
        ad.set_ad(msg.text.removeprefix("/set_ad"))
        return await msg.reply(messages.get("ad_is_set", "‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"), parse_mode="HTML")
    except:
        return await msg.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", parse_mode="HTML")

@dp.message(Command("dell_ad"))
async def dell_ad(msg: types.Message):
    assert users
    users.ensure(msg.chat.id, is_group=(msg.chat.type != "private"), title=getattr(msg.chat, "title", None),
                 username=getattr(msg.chat, "username", None), is_started=True)

    lang = users.get_lang(str(msg.chat.id) if msg.chat.type != "private" else str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    if (str(msg.from_user.id) != CFG.ADMIN_ID):
        return await msg.reply(messages.get("del_ad_error", "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É!"), parse_mode="HTML")
    try:
        ad.set_ad("")
        return await msg.reply(messages.get("ad_is_deleted", "‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"), parse_mode="HTML")
    except:
        return await msg.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", parse_mode="HTML")

@dp.message(Command("get_ad"))
async def get_ad(msg: types.Message):
    assert users
    users.ensure(msg.chat.id, is_group=(msg.chat.type != "private"), title=getattr(msg.chat, "title", None),
                 username=getattr(msg.chat, "username", None), is_started=True)

    lang = users.get_lang(str(msg.chat.id) if msg.chat.type != "private" else str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    if (str(msg.from_user.id) != CFG.ADMIN_ID):
        return await msg.reply(messages.get("get_ad_error", "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É!"), parse_mode="HTML")
    try:
        if (ad.get_ad() == ""):
            return await msg.reply(messages.get("not_ad",  "–†–µ–∫–ª–∞–º–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"), parse_mode="HTML")
        return await msg.reply(messages.get("actual_ad",  "–¢–µ–∫—É—â–∞—è —Ä–µ–∫–ª–∞–º–∞: \n\n {value}").format(value=ad.get_ad()), parse_mode="HTML")
    except:
        return await msg.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", parse_mode="HTML")

@dp.message(Command("get_stats"))
async def get_stats(msg: types.Message):
    assert users
    users.ensure(msg.chat.id, is_group=(msg.chat.type != "private"), title=getattr(msg.chat, "title", None),
                 username=getattr(msg.chat, "username", None), is_started=True)

    lang = users.get_lang(str(msg.chat.id) if msg.chat.type != "private" else str(msg.from_user.id), "tg")
    messages = (getattr(bot, "context", {}) or {}).get("messages", {}).get(lang, {})
    if (str(msg.from_user.id) != CFG.ADMIN_ID):
        return await msg.reply(messages.get("not_admin", "üö´ –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"), parse_mode="HTML")
    try:
        return await msg.reply(stats.get_stats(), parse_mode="HTML")
    except:
        return await msg.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", parse_mode="HTML")
